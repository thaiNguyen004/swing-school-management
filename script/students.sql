-- trigger - proc - function -- Students

create or alter function getStudentByUsername (@username varchar(50))
returns table 
as
return
select 
	s.StudentID,
	s.FullName,
	s.Sex,
	s.Batch,
	s.DateOfBirth,
	s.Email,
	s.PhoneNumber,
	s.Provice,
	sp.SpecificallyMajorName,
	s.Photo,
	s.LastModified,
	s.Descriptor
	from students s
	join UserInformations u on s.Email = u.Username
	join SpecificallyMajors sp on sp.SpecificallyMajorID = s.SpecificallyMajorID
	where s.Email = @username

	select * from UserInformations
	select * from dbo.getStudentByUsername('dungbhph00002@fpt.edu.vn')

-- Update email student
CREATE OR ALTER TRIGGER UpdateStudentEmail on Students
AFTER INSERT, UPDATE
as
BEGIN
    UPDATE S
    SET S.Email = ConCAT(ConCAT(concat(dbo.prefixEmail(I.FullName), 'ph'), RIGHT('0000' + CasT(I.StudentID as VARCHAR(5)), 5)), '@fpt.edu.vn')
    FROM Students as S
    JOIN Inserted as I on S.StudentID = I.StudentID;
END;



CREATE OR ALTER TRIGGER trigger_Create_Student
on Students
AFTER INSERT
as
BEGIN
	-- Update Students TABLE
	UPDATE Students
	SET Photo = CASE WHEN inserted.Photo IS NULL THEN CONVERT(VARBINARY(MAX), '0xinserted.Photo END,
		isDelete = 0
	FROM Students
	INNER JOIN inserted on Students.studentID = inserted.studentID;

	-- INSERT INTO UserInformations TABLE
	INSERT INTO UserInformations (Username, Password, StudentID, TeacherID, EmployeeID, Role, LastModified)
	SELECT
		ConCAT(ConCAT(concat(dbo.prefixEmail(inserted.FullName), 'ph'), RIGHT('0000' + CasT(inserted.StudentID as VARCHAR(5)), 5)), '@fpt.edu.vn'),
		CONCAT(dbo.prefixEmail(inserted.FullName), RIGHT('0000' + CAST(inserted.StudentID as VARCHAR(5)), 5)),
		inserted.studentid,
		NULL,
		NULL,
		'4',
		GETDATE()
	FROM inserted;

	-- INSERT INTO MSSV TABLE
	INSERT INTO MSSV (StudentID, StudentCode)
	SELECT 
		inserted.StudentID,
		RIGHT('0000' + CasT(inserted.StudentID as VARCHAR(5)), 5)
	FROM inserted;
END

select * from students
select * from StudyingParticipations
select * from dbo.getSubjectByStudyingParticipations(16)

-- update student ----------------------------
CREATE OR ALTER PROC UpdateStudent
@StudentName NVARCHAR(50),
@Sex INT ,
@Dob DATE,
@PhoneNumber VARCHAR(10),
@Provice NVARCHAR(50),
@Photo VARBINARY(MAX),
@Batch INT,
@SpecificallyMajorID INT,
@LastModified DATE,
@Descriptor NVARCHAR(50),
@StudentID INT
as
BEGIN
	UPDATE Students
	SET Students.FullName = @StudentName,
	Students.Sex = @Sex,
	Students.DateOfBirth = @Dob,
	Students.PhoneNumber = @PhoneNumber,
	Students.Provice = @Provice,
	Students.Photo = @Photo,
	Students.Batch = @Batch,
	Students.SpecificallyMajorID = @SpecificallyMajorID,
	Students.LastModified = @LastModified,
	Students.Descriptor = @Descriptor
	WHERE Students.StudentID = @StudentID
END




-- lấy thông tin sinh viên từ giới tính
CREATE OR ALTER Function getStudentBySex (@Sex INT)
RETURNS TABLE
AS
RETURN 
SELECT 
Students.StudentID, 
Students.FullName, 
Students.Sex, 
Students.Batch, 
Students.DateOfBirth, 
Students.Email, 
Students.PhoneNumber, 
Students.Provice, 
SpecificallyMajors.SpecificallyMajorName, 
Students.Photo, 
Students.LastModified, 
Students.Descriptor
FROM Students
JOIN SpecificallyMajors on SpecificallyMajors.SpecificallyMajorID = Students.SpecificallyMajorID
WHERE Students.Sex = @Sex AND students.isDelete = 0
SELECT * FROM DBO.getStudentBySex(1);



-- Lấy sinh viên từ mã sinh viên
CREATE OR ALTER FUNCTIon getStudent (@ID INT)
RETURNS TABLE
as
RETURN
SELECT 
	Students.StudentID, 
	Students.FullName, 
	Students.Sex, 
	Students.Batch, 
	Students.DateOfBirth, 
	Students.Email, 
	Students.PhoneNumber, 
	Students.Provice, 
	SpecificallyMajors.SpecificallyMajorName,
	Students.Photo,
	Students.LastModified,
	Students.Descriptor 
    FROM Students
	JOIN SpecificallyMajors on SpecificallyMajors.SpecificallyMajorID = Students.SpecificallyMajorID
	WHERE Students.StudentID = @ID AND Students.isDelete = 0

SELECT * FROM DBO.getStudent(11)



-- Lấy sinh viên từ id ngành hẹp
CREATE OR ALTER function getStudentBySpecificallyMajorID(@SpecificallyMajorID INT, @isDelete int)
RETURNS TABLE
as
RETURN
SELECT 
b.StudentID, 
b.FullName, 
b.Sex, 
b.Batch, 
b.DateOfBirth, 
b.Email, 
b.PhoneNumber, 
b.Provice, 
a.SpecificallyMajorName, 
b.Photo, 
b.LastModified, 
b.Descriptor
FROM SpecificallyMajors a
JOIN Students b on a.SpecificallyMajorID = b.SpecificallyMajorID
WHERE a.SpecificallyMajorID = @SpecificallyMajorID AND b.isDelete = @isDelete

SELECT * FROM DBO.getStudentBySpecificallyMajorID(3)




-- Từ mã lớp ví dụ như SD18314 có thể lấy ra các sinh viên từ TeachingassignmentID
CREATE OR ALTER FUNCTIon getStudentByClass(@TeachingassignmentID INT)
RETURNS TABLE
as
RETURN
SELECT  Students.StudentID, Students.FullName, Students.Sex, Students.Batch, Students.DateOfBirth, Students.Email, Students.PhoneNumber, Students.Provice, SpecificallyMajors.SpecificallyMajorName, Students.Photo, Students.LastModified, Students.Descriptor
    FROM Teachingassignments
    JOIN StudyingParticipations on Teachingassignments.TeachingassignmentID =  StudyingParticipations.TeachingassignmentID
	JOIN Students on Students.StudentID = StudyingParticipations.StudentID
	JOIN SpecificallyMajors on Students.SpecificallyMajorID = SpecificallyMajors.SpecificallyMajorID
    WHERE Teachingassignments.TeachingassignmentID = @TeachingassignmentID AND students.isDelete = 0

SELECT * FROM DBO.getStudentByClass(1)

select * from dbo.getStudentBySpecificallyMajorID(1, 0)
select * from students


CREATE OR ALTER PROC getClassRoomByClassRoomID 
@classroomID INT,
@isDelete INT,
@classroomName VARCHAR(5) OUTPUT
AS
	SET @classroomName = (SELECT concat(concat(Classrooms.Descriptor, Classrooms.NumberOfFloor), RIGHT('00' + Cast(Classrooms.NumberOfRoom as varchar(2)), 2))
	FROM Classrooms WHERE Classrooms.ClassroomID = @classroomID and Classrooms.isDelete = @isDelete)

declare @a varchar(5) 
execute getClassroomByClassroomID 2, 1, @a out
print @a


CREATE OR ALTER FUNCTION getStudentHaveNotJoined(@specificallyMajorID INT, @subjectDetailID INT)
RETURNS TABLE
AS
RETURN
select
	Students.StudentID,
	Students.FullName,
	Students.Sex,
	SpecificallyMajors.SpecificallyMajorName
	from Students 
	JOIN SpecificallyMajors ON Students.SpecificallyMajorID = SpecificallyMajors.SpecificallyMajorID
	where SpecificallyMajors.SpecificallyMajorID = @specificallyMajorID and  Students.StudentID NOT IN (
		select s.StudentID from StudyingParticipations s
		join Teachingassignments t on t.TeachingassignmentID = s.TeachingassignmentID
		where t.SubjectDetailID = @subjectDetailID
	)

SELECT * FROM DBO.getStudentHaveNotJoined(1, 6)


CREATE OR ALTER FUNCTION getStudentJoinedButCanChange(@specificallyMajorID INT, @subjectDetailID INT, @status INT)
RETURNS TABLE
AS
RETURN
select
	Students.StudentID,
	Students.FullName,
	Students.Sex,
	SpecificallyMajors.SpecificallyMajorName
	from Students 
	JOIN SpecificallyMajors ON Students.SpecificallyMajorID = SpecificallyMajors.SpecificallyMajorID
	where SpecificallyMajors.SpecificallyMajorID = @specificallyMajorID and  Students.StudentID IN (
		select s.StudentID from StudyingParticipations s
		join Teachingassignments t on t.TeachingassignmentID = s.TeachingassignmentID
		where t.SubjectDetailID = @subjectDetailID AND s.Status = @status
	)


	select * from dbo.getStudentJoinedButCanChange(1, 6, 1)
	select * from StudyingParticipations
	select * from students

	select * from Subjects
	select * from SubjectsDetail



CREATE OR ALTER PROC createStudyingParticipation
@teachingAssignmentID INT,
@StudentID INT
AS
BEGIN
INSERT INTO StudyingParticipations 
(TeachingassignmentID, StudentID, Status)
VALUES
(@teachingAssignmentID, @StudentID, '1')
END

select * from teachingassignments
select * from SubjectsDetail
select * from subjects
select * from StudyingParticipations

delete from StudyingParticipations where StudyingParticipations.ParticipationID = 35

create or alter trigger initGradeOfStudent 
on StudyingParticipations
after insert
as
begin
	declare @studentID INT;
	declare @teachingAssignmentID INT;
	select @studentID = studentID from inserted;
	select @teachingAssignmentID = teachingassignmentID from inserted;

	declare @subjectID INT;
	select @subjectID = su.subjectDetailID
		from teachingAssignments te 
		join subjectsdetail su on te.subjectdetailID = su.subjectdetailID
		where te.teachingassignmentid = @teachingAssignmentID;

	insert into grades
	(studentID, SubjectDetailID, LastModified)
	values (@studentID, @subjectID, getdate())
end

execute createStudyingParticipation 10, 16
select * from userinformations

CREATE OR ALTER PROC getMemberOfClass 
@TeachingAssignmentID INT,
@isTeaching INT,
@cnt INT  OUTPUT
AS
BEGIN
SET @cnt = (SELECT count(t.TeachingassignmentID)
	FROM StudyingParticipations t
	JOIN Teachingassignments s ON t.TeachingassignmentID = s.TeachingassignmentID
	WHERE t.TeachingassignmentID = @TeachingAssignmentID AND s.isTeaching = @isTeaching
	GROUP BY t.TeachingassignmentID)
END
	

select * from teachingassignments
select * from studyingParticipations
select * from subjectsdetail



insert into grades
(SubjectDetailID, StudentID, LastModified)
values
 -- 1
(6, 1, getdate()),
(6, 2, getdate()),
(6, 3, getdate()),
(6, 4, getdate()),
(5, 5, getdate()),
(6, 6, getdate()),
(6, 7, getdate()),
(6, 8, getdate()),
(6, 9, getdate()),
(6, 10, getdate()),
(6, 11, getdate()),
(6, 12, getdate()),
(6, 13, getdate()),

-- 2
(5, 1, getdate()),
(5, 2, getdate()),
(5, 3, getdate()),
(5, 4, getdate()),
(5, 6, getdate()),
(5, 7, getdate()),
(5, 9, getdate()),

-- 3
(8, 1, getdate()),
(8, 2, getdate()),
(8, 3, getdate()),
(8, 4, getdate()),
(8, 6, getdate()),
(8, 7, getdate()),
(8, 9, getdate()),
(8, 6, getdate()),

-- 7
(53, 5, getdate()),
(53, 11, getdate()),
(53, 13, getdate()),
(53, 12, getdate()),

-- 8
(41, 5, getdate()),
(41, 11, getdate()),
(41, 13, getdate()),
(41, 12, getdate()),
(41, 15, getdate());



create or alter function getGradeFromStudentID (@subjectID int, @studentID int)
returns table
as
return
	select * from grades



