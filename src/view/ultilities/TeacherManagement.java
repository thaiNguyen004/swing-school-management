package view.ultilities;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import model.beans.SubjectDetail;
import model.beans.Teacher;
import model.beans.TeachingAssignment;
import service.EmployeeManagerServices;
import service.Service;
import service.SubjectService;
import service.TeacherService;
import view.ultilities.AddTeacher;
import view.ultilities.ArrangeTeaching;
import view.login.Login;
import view.ultilities.UtilitiesTeacherManager;

/**
 *
 * @author nguye
 */
public class TeacherManagement extends javax.swing.JDialog {

    private Map<String, Integer> majorMap;
    private EmployeeManagerServices employeeService;
    private Map<String, Integer> classCodeMap;
    private DefaultTableModel teacherForMajorModel;
    private List<Teacher> listTeacher;
    private HashMap<Integer, String> navigableMajorMap;
    private final Service service;
    private DefaultTableModel teachingForClassID;
    private List<TeachingAssignment> listTeachingAssignments;
    private Teacher teacher;
    private SubjectDetail subject;
    private SubjectService subjectService;
    private TeacherService teacherService;

    /**
     * Creates new form TeacherManagement
     */
    public TeacherManagement() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                Login.load.dispose();
            }
        });
        initComponents();
        setLocationRelativeTo(null);
        getContentPane().setBackground(new Color(0x1bbc9b));

        teacherService = new TeacherService();
        subjectService = new SubjectService();

        designButton(btnArrangeTeaching, 0x27ae61, 0xebeee9, 10, 20, 10, 20);
        designButton(btnAdd, 0x27ae61, 0xebeee9, 10, 20, 10, 20);
        designButton(btnUltilities, 0x27ae61, 0xebeee9, 10, 20, 10, 20);
        designButton(btnRefresh, 0x8e44ad, 0xecf0f1, 2, 10, 2, 10);
        btnRefresh.setFont(new Font("Consolas", Font.BOLD, 14));
        service = new Service();

        CardLayout cardLayout = (CardLayout) panelTable.getLayout();
        // Hiển thị nội dung cho cboMajorManager
        defineCboMajorManajor();
        fillTeacherByMajorID();
        cboMajorManager.addActionListener(e -> {
            cardLayout.show(panelTable, "card2");
            fillTeacherByMajorID();
        });

        // Hiển thị danh sách lớp học chung
        defineCboClassCode();
        cboClassCodeManager.addActionListener(e -> {
            cardLayout.show(panelTable, "card3");
            fillTeacherByClassID();
        });

        btnRefresh.addActionListener(e -> {
            fillTeacherByMajorID();
            fillTeacherByClassID();
        });

        btnArrangeTeaching.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("địt");
                displayArrangeTeaching();
            }
        });

        cboClassCodeManager.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                cboClassCodeManager.setBackground(new Color(0xf5f6fa));
                cboMajorManager.setBackground(new Color(0x7f8c8d));
            }

        });
        cboMajorManager.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                cboMajorManager.setBackground(new Color(0xf5f6fa));
                cboClassCodeManager.setBackground(new Color(0x7f8c8d));
            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        btnArrangeTeaching = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUltilities = new javax.swing.JButton();
        cboMajorManager = new javax.swing.JComboBox<>();
        cboClassCodeManager = new javax.swing.JComboBox<>();
        lblMajorManager = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        panelTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTeacherForMajor = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTeachingForClass = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý giáo viên");
        setBackground(new java.awt.Color(27, 188, 155));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setSize(new java.awt.Dimension(1000, 800));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Consolas", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Chào mừng bạn đến với hệ thống quản lý giáo viên");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jLabel1, gridBagConstraints);

        btnArrangeTeaching.setText("Arrange Teaching");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnArrangeTeaching, gridBagConstraints);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnAdd, gridBagConstraints);

        btnUltilities.setText("Ultilities");
        btnUltilities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltilitiesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnUltilities, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cboMajorManager, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cboClassCodeManager, gridBagConstraints);

        lblMajorManager.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        lblMajorManager.setForeground(new java.awt.Color(255, 255, 255));
        lblMajorManager.setText("Major");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(lblMajorManager, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(jLabel3, gridBagConstraints);

        panelTable.setLayout(new java.awt.CardLayout());

        tblTeacherForMajor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Teacher ID", "Full name", "Sex", "Email", "Date of Birth", "Phone Number", "Provice", "Major", "Descriptor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTeacherForMajor.setFillsViewportHeight(true);
        tblTeacherForMajor.setShowGrid(true);
        jScrollPane1.setViewportView(tblTeacherForMajor);

        panelTable.add(jScrollPane1, "card2");

        tblTeachingForClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "TeacherID", "Full name", "Email", "Subject", "Tech In Shift", "Classroom", "Semester", "Block", "Season", "Last Modified", "Descriptor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTeachingForClass);

        panelTable.add(jScrollPane2, "card3");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(panelTable, gridBagConstraints);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnRefresh, gridBagConstraints);

        setBounds(0, 0, 1014, 667);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        new AddTeacher(this, false).setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUltilitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltilitiesActionPerformed
        // TODO add your handling code here:
        new UtilitiesTeacherManager(this, false).setVisible(true);
    }//GEN-LAST:event_btnUltilitiesActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    private void designButton(JButton originButton, int bgHex, int fgHex, int t, int r, int b, int l) {
        originButton.setFont(new Font("Consolas", Font.BOLD, 18));
        originButton.setBackground(new Color(bgHex));
        originButton.setForeground(new Color(fgHex));
        originButton.setBorder(new EmptyBorder(t, l, b, r));
    }

    // Hiển thị nội dung cho cboMajorManager
    private void defineCboMajorManajor() {
        majorMap = service.getMajorMap();
        navigableMajorMap = new HashMap<>();
        for (Map.Entry<String, Integer> entry : majorMap.entrySet()) {
            cboMajorManager.addItem(entry.getKey());
            navigableMajorMap.put(entry.getValue(), entry.getKey());
        }
    }

    // Fill danh sách giáo viên vào bảng từ ID major
    public void fillTeacherByMajorID() {
        int majorID = majorMap.get((String) cboMajorManager.getSelectedItem());
        listTeacher = service.getListTeacherByMajorID(majorID, false);

        teacherForMajorModel = (DefaultTableModel) tblTeacherForMajor.getModel();
        teacherForMajorModel.setRowCount(0);
        int stt = 0;
        for (Teacher o : listTeacher) {
            teacherForMajorModel.addRow(new Object[]{
                stt++,
                getMSGV(o.getTeacherID()),
                o.getTeacherName(),
                o.getSex() == 1 ? "Name" : "Nữ",
                o.getEmail(),
                o.getDateOfBirth(),
                o.getPhoneNumber(),
                o.getProvice(),
                navigableMajorMap.get(o.getMajorID()),
                o.getDescriptor()
            });
        }
    }

    // Hiển thị danh sách lớp học chung
    private void defineCboClassCode() {
        cboClassCodeManager.setBackground(new Color(0x7f8c8d));
        classCodeMap = service.getAllClassCode();
        if(classCodeMap != null) {
            for (Map.Entry<String, Integer> entry : classCodeMap.entrySet()) {
                cboClassCodeManager.addItem(entry.getKey());
            }
        }
        
    }

    public void fillTeacherByClassID() {
        if (service.getAllClassCode() != null) {
            int classID = service.getAllClassCode().get((String) cboClassCodeManager.getSelectedItem());
            listTeachingAssignments = service.getTeachingAssignmentByClassID(classID);

            teachingForClassID = (DefaultTableModel) tblTeachingForClass.getModel();
            teachingForClassID.setRowCount(0);
            int stt = 0;
            for (TeachingAssignment o : listTeachingAssignments) {
                // Tạo đối tượng teacher 
                if (o.getIsTeaching() == 1) {
                    teacher = teacherService.getTeacherByTeachingAssignmentID(o.getTeachingAssignmentID());
                    subject = subjectService.getSubjectByTeachingAssignmentID(o.getTeachingAssignmentID());

                    teachingForClassID.addRow(new Object[]{
                        stt++,
                        getMSGV(o.getTeacherID()),
                        teacher.getTeacherName(),
                        teacher.getEmail(),
                        subject.getSubjectName(),
                        o.getTeachInShift(),
                        service.getClassname(o.getTeachingAssignmentID()),
                        o.getSemester(),
                        o.getBlock(),
                        o.getSeason(),
                        o.getLastModified(),
                        o.getDescriptor()
                    });
                }
            }
        }

    }

    private String getMSGV(int TeacherID) {
        String defaultStr = "00000" + TeacherID;
        String res = "FE" + defaultStr.substring(defaultStr.length() - 5, defaultStr.length());
        return res.toUpperCase();
    }

    private void displayArrangeTeaching() {
        new ArrangeTeaching(this, false).setVisible(true);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TeacherManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TeacherManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TeacherManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TeacherManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnArrangeTeaching;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUltilities;
    private javax.swing.JComboBox<String> cboClassCodeManager;
    private javax.swing.JComboBox<String> cboMajorManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMajorManager;
    private javax.swing.JPanel panelTable;
    private javax.swing.JTable tblTeacherForMajor;
    private javax.swing.JTable tblTeachingForClass;
    // End of variables declaration//GEN-END:variables

}
