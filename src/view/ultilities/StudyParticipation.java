package view.ultilities;

import view.login.Login;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.border.EmptyBorder;
import model.beans.Major;
import model.beans.SpecificallyMajor;
import model.beans.Student;
import model.beans.Teacher;
import model.beans.TeachingAssignment;
import service.Service;
import service.StudentService;
import service.TeacherService;

/**
 *
 * @author nguye
 */
public class StudyParticipation extends javax.swing.JDialog {

    private final Service service;
    private final DefaultListModel modelListMajor;
    private TreeMap<String, Integer> majorMap;
    private List<Major> listMajor;
    private final DefaultListModel<String> modelListSpecificallyMajor;
    private final DefaultListModel<String> modelListSubjectDetail;
    private final DefaultListModel<String> modelListClass;
    private final DefaultListModel<String> modelListTeacher;
    private TreeMap<String, Integer> specificallyMajorMap;
    private List<SpecificallyMajor> listSpecificallyMajor;
    private List<TeachingAssignment> listClass;
    private TreeMap<String, TeachingAssignment> classMap;
    private final TeacherService teacherService;
    private Teacher teacherFromTeachingAssignment;
    private TreeMap<String, Integer> teacherMap;
    private final StudentService studentService;

    private List<Student> listStudent;
    private List<Student> listStudentCanChange;
    private List<Student> listStudentHaveNotJoined;

    private TreeMap<String, Integer> studentMap;
    private final DefaultListModel<String> modelListStudentHaveNotJoined;
    private TreeMap<String, Integer> mapStudentHaveNotJoined;
    private TreeMap<String, Integer> mapStudentCanChange;
    private final DefaultListModel<String> modelListStudentCanChange;
    private List<String> listStudentParticipation;

    /**
     * Creates new form StudyParticipation
     */
    public StudyParticipation(JDialog parent, boolean modal) {
        super(parent, modal);
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                Login.load.dispose();
            }
        });
        
        initComponents();

        setLocationRelativeTo(null);
        // service
        service = new Service();
        teacherService = new TeacherService();
        studentService = new StudentService();

        // model
        modelListMajor = new DefaultListModel();
        modelListSpecificallyMajor = new DefaultListModel<>();
        modelListSubjectDetail = new DefaultListModel<>();
        modelListClass = new DefaultListModel<>();
        modelListTeacher = new DefaultListModel<>();
        modelListStudentHaveNotJoined = new DefaultListModel<>();
        modelListStudentCanChange = new DefaultListModel<>();

        designButton(btnSubmit, 0x16a085, 0xecf0f1, 5, 10, 5, 10);

        // khởi tạo giá trị cho list major
        initMajor();
        fillMajorToList();

    }

    private void designButton(JButton originButton, int bgHex, int fgHex, int t, int r, int b, int l) {
        originButton.setBackground(new Color(bgHex));
        originButton.setForeground(new Color(fgHex));
        originButton.setBorder(new EmptyBorder(t, l, b, r));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblSpecificallyMajor = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlSpecificallyMajorID = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        lblMajor = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlMajor = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lblStudentHaveNotJoined = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlStudentHaveNotJoined = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        lblClass = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jlClass = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        txtCntStudent = new javax.swing.JTextField();
        lblCntStudent = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        txtSubjectDetail = new javax.swing.JTextField();
        lblSubjectDetail = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        txtClassInfo = new javax.swing.JTextField();
        lblClassInfo = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        txtShift = new javax.swing.JTextField();
        lblShift = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        txtClassroom = new javax.swing.JTextField();
        lblClassroom = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        txtSpecificallyMajor = new javax.swing.JTextField();
        lblSpecificallyMajorInfo = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        cboState = new javax.swing.JComboBox<>();
        jPanel15 = new javax.swing.JPanel();
        txtTeacher = new javax.swing.JTextField();
        lblTeacher = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rdoSortByName = new javax.swing.JRadioButton();
        rdoSortByGrade = new javax.swing.JRadioButton();
        jPanel12 = new javax.swing.JPanel();
        lblStudentCanChange = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jlStudentCanChange = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        lblSpecificallyMajor.setText("Ngành hẹp");
        jPanel1.add(lblSpecificallyMajor, java.awt.BorderLayout.NORTH);

        jlSpecificallyMajorID.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlSpecificallyMajorIDValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlSpecificallyMajorID);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.BorderLayout());

        lblMajor.setText("Ngành");
        jPanel3.add(lblMajor, java.awt.BorderLayout.NORTH);

        jlMajor.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlMajorValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jlMajor);

        jPanel3.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel3, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("JetBrains Mono", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(211, 84, 0));
        jLabel1.setText("QUẢN LÝ THAM GIA LỚP HỌC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 9.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jLabel1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.BorderLayout());

        lblStudentHaveNotJoined.setText("Sinh viên chưa tham gia học môn này");
        jPanel4.add(lblStudentHaveNotJoined, java.awt.BorderLayout.NORTH);

        jlStudentHaveNotJoined.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlStudentHaveNotJoinedValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jlStudentHaveNotJoined);

        jPanel4.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.BorderLayout());

        lblClass.setText("Lớp học");
        jPanel5.add(lblClass, java.awt.BorderLayout.NORTH);

        jlClass.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jlClass.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlClassValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(jlClass);

        jPanel5.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel5, gridBagConstraints);

        jPanel6.setLayout(new java.awt.BorderLayout(5, 0));

        txtCntStudent.setEditable(false);
        txtCntStudent.setBackground(new java.awt.Color(39, 174, 96));
        txtCntStudent.setColumns(20);
        jPanel6.add(txtCntStudent, java.awt.BorderLayout.EAST);

        lblCntStudent.setBackground(new java.awt.Color(44, 62, 80));
        lblCntStudent.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblCntStudent.setForeground(new java.awt.Color(39, 174, 96));
        lblCntStudent.setText("Số sinh viên");
        lblCntStudent.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel6.add(lblCntStudent, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel6, gridBagConstraints);

        jPanel7.setLayout(new java.awt.BorderLayout(5, 0));

        txtSubjectDetail.setEditable(false);
        txtSubjectDetail.setBackground(new java.awt.Color(39, 174, 96));
        txtSubjectDetail.setColumns(20);
        jPanel7.add(txtSubjectDetail, java.awt.BorderLayout.EAST);

        lblSubjectDetail.setBackground(new java.awt.Color(44, 62, 80));
        lblSubjectDetail.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblSubjectDetail.setForeground(new java.awt.Color(39, 174, 96));
        lblSubjectDetail.setText("Môn dạy");
        lblSubjectDetail.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel7.add(lblSubjectDetail, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel7, gridBagConstraints);

        jPanel8.setLayout(new java.awt.BorderLayout(5, 0));

        txtClassInfo.setEditable(false);
        txtClassInfo.setBackground(new java.awt.Color(39, 174, 96));
        txtClassInfo.setColumns(20);
        jPanel8.add(txtClassInfo, java.awt.BorderLayout.EAST);

        lblClassInfo.setBackground(new java.awt.Color(44, 62, 80));
        lblClassInfo.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblClassInfo.setForeground(new java.awt.Color(39, 174, 96));
        lblClassInfo.setText("Lớp học");
        lblClassInfo.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel8.add(lblClassInfo, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel8, gridBagConstraints);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 0));

        txtShift.setEditable(false);
        txtShift.setBackground(new java.awt.Color(39, 174, 96));
        txtShift.setColumns(20);
        jPanel9.add(txtShift, java.awt.BorderLayout.EAST);

        lblShift.setBackground(new java.awt.Color(44, 62, 80));
        lblShift.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblShift.setForeground(new java.awt.Color(39, 174, 96));
        lblShift.setText("Ca");
        lblShift.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel9.add(lblShift, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel9, gridBagConstraints);

        jPanel10.setLayout(new java.awt.BorderLayout(5, 0));

        txtClassroom.setEditable(false);
        txtClassroom.setBackground(new java.awt.Color(39, 174, 96));
        txtClassroom.setColumns(20);
        jPanel10.add(txtClassroom, java.awt.BorderLayout.EAST);

        lblClassroom.setBackground(new java.awt.Color(44, 62, 80));
        lblClassroom.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblClassroom.setForeground(new java.awt.Color(39, 174, 96));
        lblClassroom.setText("Phòng");
        lblClassroom.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel10.add(lblClassroom, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel10, gridBagConstraints);

        jPanel11.setLayout(new java.awt.BorderLayout(5, 0));

        txtSpecificallyMajor.setEditable(false);
        txtSpecificallyMajor.setBackground(new java.awt.Color(39, 174, 96));
        txtSpecificallyMajor.setColumns(20);
        jPanel11.add(txtSpecificallyMajor, java.awt.BorderLayout.EAST);

        lblSpecificallyMajorInfo.setBackground(new java.awt.Color(44, 62, 80));
        lblSpecificallyMajorInfo.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblSpecificallyMajorInfo.setForeground(new java.awt.Color(39, 174, 96));
        lblSpecificallyMajorInfo.setText("Ngành hẹp");
        lblSpecificallyMajorInfo.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel11.add(lblSpecificallyMajorInfo, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel11, gridBagConstraints);

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnSubmit, gridBagConstraints);

        jPanel14.setLayout(new java.awt.BorderLayout(5, 0));

        lblStatus.setBackground(new java.awt.Color(44, 62, 80));
        lblStatus.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(39, 174, 96));
        lblStatus.setText("Trạng thái");
        lblStatus.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel14.add(lblStatus, java.awt.BorderLayout.WEST);

        cboState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Còn lượt đổi ", "Hết lượt đổi" }));
        jPanel14.add(cboState, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel14, gridBagConstraints);

        jPanel15.setLayout(new java.awt.BorderLayout(5, 0));

        txtTeacher.setEditable(false);
        txtTeacher.setBackground(new java.awt.Color(39, 174, 96));
        txtTeacher.setColumns(20);
        jPanel15.add(txtTeacher, java.awt.BorderLayout.EAST);

        lblTeacher.setBackground(new java.awt.Color(44, 62, 80));
        lblTeacher.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        lblTeacher.setForeground(new java.awt.Color(39, 174, 96));
        lblTeacher.setText("Tên giảng viên");
        lblTeacher.setMinimumSize(new java.awt.Dimension(138, 15));
        jPanel15.add(lblTeacher, java.awt.BorderLayout.WEST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel15, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(3, 1));

        buttonGroup1.add(rdoSortByName);
        rdoSortByName.setText("Sắp xếp theo tên");
        rdoSortByName.setBorderPainted(true);
        jPanel2.add(rdoSortByName);

        buttonGroup1.add(rdoSortByGrade);
        rdoSortByGrade.setText("Sắp xếp theo điểm");
        rdoSortByGrade.setBorderPainted(true);
        jPanel2.add(rdoSortByGrade);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel12.setLayout(new java.awt.BorderLayout());

        lblStudentCanChange.setText("Sinh viên đã học và có thể thay đổi");
        jPanel12.add(lblStudentCanChange, java.awt.BorderLayout.NORTH);

        jlStudentCanChange.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlStudentCanChangeValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(jlStudentCanChange);

        jPanel12.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel12, gridBagConstraints);

        setBounds(0, 0, 1300, 637);
    }// </editor-fold>//GEN-END:initComponents

    private void jlMajorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlMajorValueChanged
        // TODO add your handling code here:
        defineSpecificallyMajor();
        modelListStudentCanChange.removeAllElements();
        modelListStudentHaveNotJoined.removeAllElements();
    }//GEN-LAST:event_jlMajorValueChanged

    private void jlStudentHaveNotJoinedValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlStudentHaveNotJoinedValueChanged
        // TODO add your handling code here:
        listStudentParticipation = jlStudentHaveNotJoined.getSelectedValuesList();
        
        int teachingAssignmentID = classMap.get(jlClass.getSelectedValue()).getTeachingAssignmentID();
        int cntStudentOld = service.getMemberOfClass(teachingAssignmentID, true);
        int cntStudentNew = listStudentParticipation.size();
        txtCntStudent.setText("Đã chọn " + cntStudentNew + " và lớp đã có " + cntStudentOld + " sinh viên");
    }//GEN-LAST:event_jlStudentHaveNotJoinedValueChanged

    private void jlClassValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlClassValueChanged
        // TODO add your handling code here:
        defineTeacher();
        defineStudentAvaiable();
        displaySubjectAndClassAndClassroom();
        if (jlClass.getSelectedValue() != null) {
            TeachingAssignment o = classMap.get(jlClass.getSelectedValue());
            txtShift.setText(o.getTeachInShift() + "");
        }

    }//GEN-LAST:event_jlClassValueChanged

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if (jlMajor.getSelectedIndices().length == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn trường ngành học");
        }else if(jlMajor.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn 1 giá trị ngành thôi");
        }
        
        else if (jlSpecificallyMajorID.getSelectedIndices().length == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn trường ngành hẹp");
        } else if(jlSpecificallyMajorID.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn 1 giá trị ngành hẹp thôi");
        } 
        
        else if(jlClass.getSelectedIndices().length == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn trường lớp học");
        } else if (jlClass.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn 1 giá trị lớp học thôi");
        }
        
        else if (jlStudentHaveNotJoined.getSelectedIndices().length == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sinh viên");
        }
        
        else {
            int cnt = 0;
            for (String str : listStudentParticipation) {
                int studentID = mapStudentHaveNotJoined.get(str);
                int teachingAssignmentID = classMap.get(jlClass.getSelectedValue()).getTeachingAssignmentID();
                System.out.println(teachingAssignmentID);
                System.out.println("New: " + teachingAssignmentID + "- " + studentID);
                boolean isSuccess = service.createStudyingParticipation(teachingAssignmentID, studentID);
                if(!isSuccess) {
                    JOptionPane.showMessageDialog(this, "Thêm thất bại");
                    cnt++;
                    break;
                }
            }
            if(cnt == 0) {
                JOptionPane.showMessageDialog(this, "Thêm thành công");
                defineStudentAvaiable();
            }
        }

    }//GEN-LAST:event_btnSubmitActionPerformed

    private void jlSpecificallyMajorIDValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlSpecificallyMajorIDValueChanged
        // TODO add your handling code here:
        defineClass();

    }//GEN-LAST:event_jlSpecificallyMajorIDValueChanged

    private void jlStudentCanChangeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlStudentCanChangeValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jlStudentCanChangeValueChanged

    private void initMajor() {
        listMajor = service.getAllMajors(false);
        majorMap = new TreeMap<>();
        for (Major o : listMajor) {
            majorMap.put(o.getMajorName() + "-" + o.getMajorCode(), o.getMajorID());
        }
    }

    private void fillMajorToList() {
        jlMajor.setModel(modelListMajor);
        modelListMajor.removeAllElements();
        for (Map.Entry<String, Integer> entry : majorMap.entrySet()) {
            modelListMajor.addElement(entry.getKey());
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(StudyParticipation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(StudyParticipation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(StudyParticipation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(StudyParticipation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StudyParticipation dialog = new StudyParticipation(new JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cboState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList<String> jlClass;
    private javax.swing.JList<String> jlMajor;
    private javax.swing.JList<String> jlSpecificallyMajorID;
    private javax.swing.JList<String> jlStudentCanChange;
    private javax.swing.JList<String> jlStudentHaveNotJoined;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblClassInfo;
    private javax.swing.JLabel lblClassroom;
    private javax.swing.JLabel lblCntStudent;
    private javax.swing.JLabel lblMajor;
    private javax.swing.JLabel lblShift;
    private javax.swing.JLabel lblSpecificallyMajor;
    private javax.swing.JLabel lblSpecificallyMajorInfo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStudentCanChange;
    private javax.swing.JLabel lblStudentHaveNotJoined;
    private javax.swing.JLabel lblSubjectDetail;
    private javax.swing.JLabel lblTeacher;
    private javax.swing.JRadioButton rdoSortByGrade;
    private javax.swing.JRadioButton rdoSortByName;
    private javax.swing.JTextField txtClassInfo;
    private javax.swing.JTextField txtClassroom;
    private javax.swing.JTextField txtCntStudent;
    private javax.swing.JTextField txtShift;
    private javax.swing.JTextField txtSpecificallyMajor;
    private javax.swing.JTextField txtSubjectDetail;
    private javax.swing.JTextField txtTeacher;
    // End of variables declaration//GEN-END:variables

    private void defineSpecificallyMajor() {
        if (jlMajor.getSelectedIndices().length == 1) {
            if (jlMajor.getSelectedValue() != null) {
                int majorID = majorMap.get(jlMajor.getSelectedValue());
                specificallyMajorMap = new TreeMap<>();
                listSpecificallyMajor = service.getSpecificallyMajorByMajorID(majorID, false);

                if (listSpecificallyMajor != null) {
                    for (SpecificallyMajor o : listSpecificallyMajor) {
                        specificallyMajorMap.put(o.getSpecificallyMajorName() + " - " + o.getSpecificallyMajorCode(), o.getSpecificallyMajorID());
                    }
                }

                jlSpecificallyMajorID.setModel(modelListSpecificallyMajor);
                modelListSpecificallyMajor.removeAllElements();
                for (Map.Entry<String, Integer> entry : specificallyMajorMap.entrySet()) {
                    modelListSpecificallyMajor.addElement(entry.getKey());
                }
            }

        }
    }

    private void defineClass() {
        if (jlSpecificallyMajorID.getSelectedIndices().length == 1) {
            String specificallyMajor = jlSpecificallyMajorID.getSelectedValue();
            if (specificallyMajor != null) {
                int specificallyMajorID = specificallyMajorMap.get(specificallyMajor);

                txtSpecificallyMajor.setText(specificallyMajor);

                listClass = service.getListTeachingAssignmentBySpecificallyMajorID(specificallyMajorID);
                if (listClass != null) {

                    classMap = new TreeMap<>();
                    for (TeachingAssignment o : listClass) {
                        classMap.put(service.getClassname(o.getTeachingAssignmentID()) + " - " + o.getSubjectName() + " Ca " + o.getTeachInShift(), o);
                    }

                    jlClass.setModel(modelListClass);
                    modelListClass.removeAllElements();
                    for (Map.Entry<String, TeachingAssignment> entry : classMap.entrySet()) {
                        modelListClass.addElement(entry.getKey());
                    }

                }
            }

        }

    }

    private void defineTeacher() {
        String value = jlClass.getSelectedValue();
        if (value != null) {
            TeachingAssignment o = classMap.get(jlClass.getSelectedValue());
            teacherFromTeachingAssignment = teacherService.getTeacherByTeachingAssignmentID(o.getTeachingAssignmentID());
            if (teacherFromTeachingAssignment != null) {
                txtTeacher.setText(teacherFromTeachingAssignment.getTeacherName());
            }
        }
    }

    private void defineStudentAvaiable() {
        if (jlClass.getSelectedIndices().length == 1) {
            String value = jlClass.getSelectedValue();
            if (value != null) {
                TeachingAssignment o = classMap.get(value);
                int subjectDetailID = o.getSubjectID();
                int specificallyMajorID = specificallyMajorMap.get(
                        jlSpecificallyMajorID.getSelectedValue());

                listStudentHaveNotJoined = service.getStudentHaveNotJoined(
                        specificallyMajorID, subjectDetailID);

                mapStudentHaveNotJoined = new TreeMap<>();
                for (Student student : listStudentHaveNotJoined) {
                    mapStudentHaveNotJoined.put(
                            student.getStudentName() + " - " + getMSSV(student.getStudentID()),
                            student.getStudentID());
                }

                listStudentCanChange = service.getStudentJoinedButCanChange(specificallyMajorID, subjectDetailID, 1);
                mapStudentCanChange = new TreeMap<>();

                for (Student student : listStudentCanChange) {
                    mapStudentCanChange.put(
                            student.getStudentName() + " - " + getMSSV(student.getStudentID()),
                            student.getStudentID());
                }

                showStudent();
            }
        }

    }

    private String getMSSV(int StudentID) {
        String defaultStr = "00000" + StudentID;
        String res = "PH" + defaultStr.substring(defaultStr.length() - 5, defaultStr.length());
        return res.toUpperCase();
    }

    private void displaySubjectAndClassAndClassroom() {
        String selected = jlClass.getSelectedValue();
        if (selected != null) {
            TeachingAssignment o = classMap.get(selected);
            txtSubjectDetail.setText(o.getSubjectName());
            txtClassInfo.setText(service.getClassname(o.getTeachingAssignmentID()));
            txtClassroom.setText(service.getClassroomName(o.getClassroomID(), false));
        }
    }

    private void showStudent() {
        jlStudentHaveNotJoined.setModel(modelListStudentHaveNotJoined);
        modelListStudentHaveNotJoined.removeAllElements();
        for (Map.Entry<String, Integer> entry : mapStudentHaveNotJoined.entrySet()) {
            modelListStudentHaveNotJoined.addElement(entry.getKey());
        }

        jlStudentCanChange.setModel(modelListStudentCanChange);
        modelListStudentCanChange.removeAllElements();
        for (Map.Entry<String, Integer> entry : mapStudentCanChange.entrySet()) {
            modelListStudentCanChange.addElement(entry.getKey());
        }
    }

}
