package view.ultilities;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.beans.Employee;
import service.EmployeeService;
import service.Service;
import view.login.Login;

/**
 *
 * @author nguye
 */
public class EmployeeManagement extends javax.swing.JDialog {

    private final CardLayout cardLayout;
    private final EmployeeService employeeService;
    private JFileChooser fileChooser;
    private byte[] data = null;
    private final Service service;
    private final DefaultTableModel modelTable;
    private List<Employee> listEmployee;
    private boolean isadmin;

    /**
     * Creates new form EmployeeManagement
     */
    public EmployeeManagement(JDialog parent, boolean modal, boolean isAdmin) {
        super(parent, modal);
        getContentPane().setBackground(new Color(0xf1c40f));
        initComponents();
        setLocationRelativeTo(null);
        
        this.isadmin = isAdmin;

        employeeService = new EmployeeService();
        service = new Service();

        if (service.checkEmployeeManager()) {
            cboTitle.removeAllItems();
            cboTitle.addItem("Nhân viên thường");
        }

        cardLayout = (CardLayout) cards.getLayout();

        designButton(btnAddEmployee, 0xFC427B, 0xecf0f1, 10, 25, 10, 25);
        designButton(btnBrowser, 0x2c3e50, 0xecf0f1, 10, 25, 10, 25);
        designButton(btnChange, 0x2980b9, 0xecf0f1, 10, 25, 10, 25);
        designButton(btnTurnUp, 0xFC427B, 0xecf0f1, 10, 25, 10, 25);
        designButton(btnDelete, 0xc0392b, 0xecf0f1, 10, 25, 10, 25);
        designButton(btnCreateEmployee, 0x82589F, 0xecf0f1, 10, 25, 10, 25);

        modelTable = (DefaultTableModel) tblListEmployee.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnAddEmployee = new javax.swing.JButton();
        btnTurnUp = new javax.swing.JButton();
        cards = new javax.swing.JPanel();
        cardAddEmployee = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtEmployeeName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cboSex = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtEmployeeDob = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtEmployeePhoneNumber = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtEmployeeProvice = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cboTitle = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        lblPhoto = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtEmployeeDescriptor = new javax.swing.JTextField();
        btnBrowser = new javax.swing.JButton();
        btnCreateEmployee = new javax.swing.JButton();
        cardTurnUp = new javax.swing.JPanel();
        scrp = new javax.swing.JScrollPane();
        tblListEmployee = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 700));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(142, 68, 173));
        jLabel1.setText("Quản lý nhân viên");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(jLabel1, gridBagConstraints);

        btnAddEmployee.setText("Thêm ");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnAddEmployee, gridBagConstraints);

        btnTurnUp.setText("Tra cứu");
        btnTurnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTurnUpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnTurnUp, gridBagConstraints);

        cards.setLayout(new java.awt.CardLayout());

        cardAddEmployee.setBackground(new java.awt.Color(106, 176, 76));
        cardAddEmployee.setPreferredSize(new java.awt.Dimension(800, 600));
        cardAddEmployee.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(142, 68, 173));
        jLabel2.setText("Thêm nhân viên");
        cardAddEmployee.add(jLabel2, new java.awt.GridBagConstraints());

        jPanel1.setBackground(new java.awt.Color(106, 176, 76));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tên nhân viên");
        jPanel1.add(jLabel3, java.awt.BorderLayout.NORTH);

        txtEmployeeName.setBackground(new java.awt.Color(22, 160, 133));
        txtEmployeeName.setColumns(30);
        txtEmployeeName.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        txtEmployeeName.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jPanel1.add(txtEmployeeName, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel1, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(106, 176, 76));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Giới tính");
        jPanel2.add(jLabel4, java.awt.BorderLayout.NORTH);

        cboSex.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        cboSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));
        jPanel2.add(cboSex, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(106, 176, 76));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Ngày sinh");
        jPanel3.add(jLabel5, java.awt.BorderLayout.NORTH);

        txtEmployeeDob.setBackground(new java.awt.Color(22, 160, 133));
        txtEmployeeDob.setColumns(30);
        txtEmployeeDob.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        txtEmployeeDob.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jPanel3.add(txtEmployeeDob, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(106, 176, 76));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Số điện thoại");
        jPanel4.add(jLabel6, java.awt.BorderLayout.NORTH);

        txtEmployeePhoneNumber.setBackground(new java.awt.Color(22, 160, 133));
        txtEmployeePhoneNumber.setColumns(30);
        txtEmployeePhoneNumber.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        txtEmployeePhoneNumber.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jPanel4.add(txtEmployeePhoneNumber, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel4, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(106, 176, 76));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Tỉnh / Thành phố");
        jPanel5.add(jLabel7, java.awt.BorderLayout.NORTH);

        txtEmployeeProvice.setBackground(new java.awt.Color(22, 160, 133));
        txtEmployeeProvice.setColumns(30);
        txtEmployeeProvice.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        txtEmployeeProvice.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jPanel5.add(txtEmployeeProvice, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel5, gridBagConstraints);

        jPanel6.setBackground(new java.awt.Color(106, 176, 76));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Chức tước");
        jPanel6.add(jLabel8, java.awt.BorderLayout.NORTH);

        cboTitle.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        cboTitle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nhân viên thường", "Quản Lý" }));
        jPanel6.add(cboTitle, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel6, gridBagConstraints);

        jPanel7.setBackground(new java.awt.Color(211, 84, 0));
        jPanel7.setMinimumSize(new java.awt.Dimension(120, 120));
        jPanel7.setPreferredSize(new java.awt.Dimension(120, 120));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        lblPhoto.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPhoto.setForeground(new java.awt.Color(255, 255, 255));
        lblPhoto.setText("NOTHING");
        jPanel7.add(lblPhoto, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel7, gridBagConstraints);

        jPanel8.setBackground(new java.awt.Color(106, 176, 76));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Mô tả");
        jPanel8.add(jLabel9, java.awt.BorderLayout.NORTH);

        txtEmployeeDescriptor.setBackground(new java.awt.Color(22, 160, 133));
        txtEmployeeDescriptor.setColumns(30);
        txtEmployeeDescriptor.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        txtEmployeeDescriptor.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jPanel8.add(txtEmployeeDescriptor, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(jPanel8, gridBagConstraints);

        btnBrowser.setFont(new java.awt.Font("Consolas", 3, 12)); // NOI18N
        btnBrowser.setText("Browser");
        btnBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowserActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(btnBrowser, gridBagConstraints);

        btnCreateEmployee.setText("Create Employee");
        btnCreateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEmployeeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cardAddEmployee.add(btnCreateEmployee, gridBagConstraints);

        cards.add(cardAddEmployee, "cardAdd");

        cardTurnUp.setPreferredSize(new java.awt.Dimension(800, 600));
        cardTurnUp.setLayout(new java.awt.GridBagLayout());

        tblListEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Name", "Sex", "Report to", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblListEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListEmployeeMouseClicked(evt);
            }
        });
        scrp.setViewportView(tblListEmployee);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        cardTurnUp.add(scrp, gridBagConstraints);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        cardTurnUp.add(btnDelete, gridBagConstraints);

        btnChange.setText("Change");
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        cardTurnUp.add(btnChange, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(142, 68, 173));
        jLabel10.setText("Tra cứu và xóa");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        cardTurnUp.add(jLabel10, gridBagConstraints);

        cards.add(cardTurnUp, "cardTurnUp");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 2.0;
        getContentPane().add(cards, gridBagConstraints);

        setBounds(0, 0, 855, 638);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed
        cardLayout.show(cards, "cardAdd");

        if (service.checkEmployeeManager()) {
            cboTitle.removeAllItems();
            cboTitle.addItem("Nhân viên thường");
        }
    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    private void btnTurnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTurnUpActionPerformed
        cardLayout.show(cards, "cardTurnUp");
        initListEmployee();
    }//GEN-LAST:event_btnTurnUpActionPerformed

    private void btnCreateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateEmployeeActionPerformed
        createEmployee();
    }//GEN-LAST:event_btnCreateEmployeeActionPerformed

    private void btnBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowserActionPerformed
        // TODO add your handling code here:
        data = initFileExplorer();
        if (data != null) {
            displayPhoto(data);
        }
    }//GEN-LAST:event_btnBrowserActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        deleteEmployee();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblListEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListEmployeeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblListEmployeeMouseClicked

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        // TODO add your handling code here:
        changeRole();
    }//GEN-LAST:event_btnChangeActionPerformed

    private void designButton(JButton originButton, int bgHex, int fgHex, int t, int r, int b, int l) {
        originButton.setBackground(new Color(bgHex));
        originButton.setForeground(new Color(fgHex));
        originButton.setBorder(new EmptyBorder(t, l, b, r));
    }

    private byte[] initFileExplorer() {
        fileChooser = new JFileChooser();
        FileNameExtensionFilter filter
                = new FileNameExtensionFilter("Images",
                        "jpg",
                        "jpeg",
                        "png",
                        "gif");
        fileChooser.setFileFilter(filter);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                // Đọc dữ liệu từ tệp ảnh và chuyển thành mảng byte
                FileInputStream in = new FileInputStream(selectedFile);
                Image img = ImageIO.read(in);

                ByteArrayOutputStream bout = new ByteArrayOutputStream();
                ImageIO.write((RenderedImage) img, "png", bout);
                return bout.toByteArray();
            } catch (Exception e) {
                new Success(this, 0, "Thêm ảnh thành công", "Thêm ảnh thất bại", "Bạn hãy chọn ảnh có định dạng là .png");
                System.out.println(e);
            }
        }
        return null;
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EmployeeManagement dialog = new EmployeeManagement(new JDialog(), true, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JButton btnBrowser;
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnCreateEmployee;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnTurnUp;
    private javax.swing.JPanel cardAddEmployee;
    private javax.swing.JPanel cardTurnUp;
    private javax.swing.JPanel cards;
    private javax.swing.JComboBox<String> cboSex;
    private javax.swing.JComboBox<String> cboTitle;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JScrollPane scrp;
    private javax.swing.JTable tblListEmployee;
    private javax.swing.JTextField txtEmployeeDescriptor;
    private javax.swing.JTextField txtEmployeeDob;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JTextField txtEmployeePhoneNumber;
    private javax.swing.JTextField txtEmployeeProvice;
    // End of variables declaration//GEN-END:variables

    private void createEmployee() {
        if (validateEmployeeForm()) {
            int sex = 1;
            if (cboSex.getSelectedIndex() == 1) {
                sex = 2;
            }
            int title = 2;
            if (!service.checkEmployeeManager()) {
                if (cboTitle.getSelectedIndex() == 1) {
                    title = 1;
                }
            }
            boolean isSuccess = employeeService.createEmployee(new Employee(
                    txtEmployeeName.getText(),
                    sex,
                    LocalDate.parse(txtEmployeeDob.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                    txtEmployeePhoneNumber.getText(),
                    txtEmployeeProvice.getText(),
                    title,
                    LocalDate.parse(LocalDate.now().toString(), DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                    txtEmployeeDescriptor.getText(),
                    data));

            if (isSuccess) {
                JOptionPane.showMessageDialog(this, "Tạo nhân viên thành công", "Thông báo", JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Tạo nhân viên thất bại", "Thông báo", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private boolean validateEmployeeForm() {
        if (txtEmployeeName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập trường tên nhân viên", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (txtEmployeeDob.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập trường ngày sinh", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            try {
                DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                LocalDate.parse(txtEmployeeDob.getText(), format);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập ngày tháng hợp lệ theo định dạng yyyy-MM-dd", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
                System.out.println(e);
                return false;
            }
        }
        if (txtEmployeeProvice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập trường tỉnh/ thành phố", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (txtEmployeePhoneNumber.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập trường số điện thoại", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void displayPhoto(byte[] data) {
        try (ByteArrayInputStream bin = new ByteArrayInputStream(data)) {
            if (bin != null) {
                Image img = ImageIO.read(bin);
                if (img != null) {
                    lblPhoto.setIcon(new ImageIcon(img.getScaledInstance(120, 120, Image.SCALE_SMOOTH)));
                }
            }
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    private void initListEmployee() {
        modelTable.setRowCount(0);
        if (isadmin) {
            listEmployee = service.getListEmployeeFromAdmin();
        } else {
            listEmployee = service.getListEmployeeFromEmployee();
        }
        if (listEmployee != null) {
            for (Employee o : listEmployee) {
                modelTable.addRow(new Object[]{
                    o.getEmployeeName(),
                    (o.getSex() == 1 ? "Nam" : "Nữ"),
                    (o.getReportTo() == 0 ? "Trưởng nhân viên" : service.getEmployeeManagerName(o.getReportTo())),
                    o.getEmail()});
            }
        }
    }

    private void deleteEmployee() {
        int rowIndex = tblListEmployee.getSelectedRow();
        if (rowIndex != -1) {
            if (tblListEmployee.getSelectedRowCount() == 1) {
                String[] options = {"Đồng ý", "Từ chối"};
                int selected = JOptionPane.showOptionDialog(this,
                        "Bạn có đồng ý xóa nhân viên này không",
                        "Cảnh báo", JOptionPane.PLAIN_MESSAGE, JOptionPane.PLAIN_MESSAGE, null, options, options[1]);
                if (selected == 0) {
                    Employee o = listEmployee.get(rowIndex);
                    if (employeeService.deleteEmployee(o.getEmployeeID(), o.getEmail())) {
                        JOptionPane.showMessageDialog(this, "Xóa thành công", "Thông báo", JOptionPane.PLAIN_MESSAGE);
                        initListEmployee();
                    } else {
                        JOptionPane.showMessageDialog(this, "Xóa thất bại", "Thông báo", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Hủy bỏ thành công");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Vui lòng chỉ chọn 1 nhân viên", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    private void changeRole() {
        int rowIndex = tblListEmployee.getSelectedRow();
        if (rowIndex != -1) {
            if (tblListEmployee.getSelectedRowCount() == 1) {
                String[] options = {"Đồng ý", "Từ chối"};
                int selected = JOptionPane.showOptionDialog(this,
                        "Chuyển đổi trưởng nhân viên (Sẽ tự động thoát app nếu chuyển thành công)",
                        "Cảnh báo", JOptionPane.PLAIN_MESSAGE, JOptionPane.PLAIN_MESSAGE, null, options, options[1]);
                if (selected == 0) {
                    Employee o = listEmployee.get(rowIndex);
                    if (o.getTitle() == 1) {
                        JOptionPane.showMessageDialog(this, "Đây là trưởng rồi mà");
                    } else {
                        if (service.changeRoleEmployee(o)) {
                            JOptionPane.showMessageDialog(this, "Chuyển đổi thành công", "Thông báo", JOptionPane.PLAIN_MESSAGE);
                            if (!isadmin) {
                                Login.disposeFrame();
                            } else {
                                initListEmployee();
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Chuyển đổi thất bại", "Thông báo", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Hủy bỏ thành công");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Vui lòng chỉ chọn 1 nhân viên", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

}
